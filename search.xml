<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cuda版本过低无法适配显卡</title>
      <link href="/2025/08/17/cuda%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E%E6%97%A0%E6%B3%95%E9%80%82%E9%85%8D%E6%98%BE%E5%8D%A1/"/>
      <url>/2025/08/17/cuda%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E%E6%97%A0%E6%B3%95%E9%80%82%E9%85%8D%E6%98%BE%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<p>sm_** 报错</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用<strong>A800</strong>显卡，配置了一个<code>pytorch==1.6.0 torchvision==0.7.0 cudatoolkit=10.2</code>的环境，但在测试时报错如下：</p><pre><code class="bash">(thy_vln_tta) wangzixu@gpu01:~/tianhaoyuan/WS-MGMap$ pythonPython 3.6.15 | packaged by conda-forge | (default, Dec  3 2021, 18:49:41) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.tensor([1.0, 2.0]).cuda()/share/home/wangzixu/miniconda3/envs/thy_vln_tta/lib/python3.6/site-packages/torch/cuda/__init__.py:125: UserWarning: NVIDIA A800 80GB PCIe with CUDA capability sm_80 is not compatible with the current PyTorch installation.The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 compute_37.If you want to use the NVIDIA A800 80GB PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/  warnings.warn(incompatible_device_warn.format(device_name, capability, &quot; &quot;.join(arch_list), device_name))</code></pre><p>这意味着当前pytorch和cuda版本过低，无法支持此显卡</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>首先查看当前显卡的计算能力，访问<a href="https://developer.nvidia.com/cuda-gpus">网站1</a>，可以看到（A800是A100的中国特供版本）<img src="https://s21.ax1x.com/2025/08/17/pV0OfhT.png" alt="image1"></li><li>然后访问<a href="https://docs.nvidia.com/datacenter/tesla/drivers/index.html#cuda-toolkit-driver-and-architecture-matrix">网站2</a>，可以看到<strong>8.0</strong>的计算能力对应最低的cuda版本为<strong>11.0</strong><img src="https://s21.ax1x.com/2025/08/17/pV0Ov9O.md.png" alt="image2"></li><li>接下来就是<a href="https://pytorch.org/get-started/previous-versions/">在这</a>找到合适torch安装，pytorch和python的对应关系可以看<a href="https://docs.pytorch.org/audio/stable/installation.html#compatibility-matrix">这里</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用SolidWorks将机器狗的装配体文件转为URDF</title>
      <link href="/2025/07/20/%E4%BD%BF%E7%94%A8SolidWorks%E5%B0%86%E6%9C%BA%E5%99%A8%E7%8B%97%E7%9A%84%E8%A3%85%E9%85%8D%E4%BD%93%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BAURDF/"/>
      <url>/2025/07/20/%E4%BD%BF%E7%94%A8SolidWorks%E5%B0%86%E6%9C%BA%E5%99%A8%E7%8B%97%E7%9A%84%E8%A3%85%E9%85%8D%E4%BD%93%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BAURDF/</url>
      
        <content type="html"><![CDATA[<p>简单的操作性工作</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>我们需要使用ROS提供的SW插件<strong>sw_urdf_exporter</strong>，从<a href="http://wiki.ros.org/sw_urdf_exporter">这</a>下载安装<br><img src="https://s21.ax1x.com/2025/07/19/pV3XP5q.jpg" alt="1"></li></ul><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><h3 id="创建每一个link的点和坐标系"><a href="#创建每一个link的点和坐标系" class="headerlink" title="创建每一个link的点和坐标系"></a>创建每一个link的点和坐标系</h3><ul><li><em>点</em>和<em>坐标系</em>的创建在<strong>参考几何体</strong>这一栏<br><img src="https://s21.ax1x.com/2025/07/19/pV3OLPP.png" alt="2"></li><li>我们先给机器狗的躯干创建，先创建<em>点</em>，再在<em>点</em>的基础上创建<em>坐标系</em>。<ol><li><img src="https://s21.ax1x.com/2025/07/19/pV3Ob5t.jpg" alt="3"></li><li>对于躯干这个<strong>base_link</strong>，<em>坐标系</em>创建的位置没有要求，只需要在躯干零件上即可，方向的话要尽量按照ROS中定义的那样去定义（右手系，x轴指向前进方向，z轴指向高度方向）。还有一点，SW在创建坐标系的时候红色为x轴，绿色为y轴，蓝色为z轴。<br>  <img src="https://s21.ax1x.com/2025/07/19/pV3OHUI.jpg" alt="4"><br>  <img src="https://s21.ax1x.com/2025/07/19/pV3O7VA.jpg" alt="5"></li></ol></li><li>接着给左前腿（LF）的第一个大腿连杆（绕ROLL转动）创建，此时就要注意将其坐标系的<strong>x轴</strong>与此大腿关节的转动轴重合。<br><img src="https://s21.ax1x.com/2025/07/19/pV3XFP0.jpg" alt="6"></li><li>然后是给左前腿的第二个大腿连杆（绕PITCH转动）创建，同样要注意将其坐标系的<strong>y轴</strong>与此关节的转动轴重合。<br><img src="https://s21.ax1x.com/2025/07/20/pV8QXWt.jpg" alt="7"></li><li>再给左前腿的第三个小腿连杆（绕PITCH转动）创建，也是要注意将其坐标系的<strong>y轴</strong>与此关节的转动轴重合。<br><img src="https://s21.ax1x.com/2025/07/20/pV8Qbod.jpg" alt="8"></li><li>其它的腿也是同理，最终效果如下（按LF，RF，LB，RB）的顺序创建：<br><img src="https://s21.ax1x.com/2025/07/20/pV8QxQf.jpg" alt="9"></li></ul><h3 id="创建每一个joint的旋转轴"><a href="#创建每一个joint的旋转轴" class="headerlink" title="创建每一个joint的旋转轴"></a>创建每一个joint的旋转轴</h3><ul><li><em>旋转轴</em>的创建也在<strong>参考几何体</strong>这一栏。<br><img src="https://s21.ax1x.com/2025/07/19/pV3XExU.jpg" alt="10"></li><li>给左前腿创建基准轴，注意基准轴要与对应坐标轴重合。<br><img src="https://s21.ax1x.com/2025/07/20/pV8QOJI.jpg" alt="11"></li><li>12个基准轴创建完成后如下：<br><img src="https://s21.ax1x.com/2025/07/19/pV3XZMF.jpg" alt="12"></li></ul><h3 id="定义URDF"><a href="#定义URDF" class="headerlink" title="定义URDF"></a>定义URDF</h3><ul><li>首先点开插件：<br><img src="https://s21.ax1x.com/2025/07/20/pV8QLFA.png" alt="13"></li><li>先定义<strong>base_link</strong>的坐标系、实体和子连杆的数量。<br><img src="https://s21.ax1x.com/2025/07/20/pV8QvSP.jpg" alt="14"></li><li>然后定义左前腿的第一个大腿连杆（LF_link_1）的坐标系、实体、转轴等。<br><img src="https://s21.ax1x.com/2025/07/21/pV8aavj.jpg" alt="15"></li><li>在全部定义完后点击<strong>Preview and Export</strong><br><img src="https://s21.ax1x.com/2025/07/20/pV8l9eg.jpg" alt="16"></li><li>这里可以检查刚才的定义是否有误。此外，由于我们的坐标系定义与机械组给的活动角度示意图中的坐标系不一样，这里就先随意填写<strong>Limit</strong>中的<strong>lower</strong>和<strong>upper</strong>，但可以让二者差值是对的，方便后续手动调整。<br><img src="https://s21.ax1x.com/2025/07/21/pV8aU2Q.jpg" alt="17"></li><li>然后点击<strong>Next</strong>，最后点击<strong>Export URDF and Meshes</strong>即可</li></ul><h2 id="后续处理"><a href="#后续处理" class="headerlink" title="后续处理"></a>后续处理</h2><ul><li>使用一个可以<a href="https://gkjohnson.github.io/urdf-loaders/javascript/example/bundle/">在线预览URDF的网站</a>，直接将刚刚导出的文件夹整个拖进来。然后拖动滑块观察每个关节的可活动角度，有些是不对的，这就需要我们对照着机械组的示意图手动修改一下urdf文件。<br><img src="https://s21.ax1x.com/2025/07/20/pV8lCwQ.jpg" alt="18"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中使用vscode和gdb调试c++程序</title>
      <link href="/2025/02/10/%E5%9C%A8Ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8vscode%E5%92%8Cgdb%E8%B0%83%E8%AF%95c++%E7%A8%8B%E5%BA%8F/"/>
      <url>/2025/02/10/%E5%9C%A8Ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8vscode%E5%92%8Cgdb%E8%B0%83%E8%AF%95c++%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><span id="more"></span><ol><li>安装编译器和调试器，我们实际上是通过vscode使用gdb来调试程序 <code>sudo apt install g++ gcc gdb build-essential</code></li><li>在vscode中安装 <strong>C&#x2F;C++</strong> 插件：<img src="https://www.helloimg.com/i/2025/02/10/67a9d3328c870.png" alt="插件">]</li><li>创建一个工程，其结构如下：<pre><code class="bash">.├── build├── CMakeLists.txt├── include│   └── add.h├── main.cpp└── src    └── add.cpp</code></pre></li><li>工程中各文件内容如下：<ul><li>CMakeLists.txt<pre><code class="cmake">cmake_minimum_required(VERSION 3.0)project(USEDEBUG)set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -Wall&quot;)set(CMAKE_BUILD_TYPE Debug) # 注意要以Debug模式编译include_directories($&#123;CMAKE_SOURCE_DIR&#125;/include)add_executable(main main.cpp src/add.cpp)</code></pre></li><li>add.h<pre><code class="cpp">#pragma once int add(int a, int b);</code></pre></li><li>add.cpp<pre><code class="cpp">#include &quot;add.h&quot;int add(int a, int b)&#123;    int c = a + b;    return c;&#125;</code></pre></li><li>main.cpp<pre><code class="cpp">#include &lt;iostream&gt;#include &quot;add.h&quot;int main()&#123;    int a = 20;    int b = 12;    std::cout &lt;&lt; &quot;a + b = &quot; &lt;&lt; add(a, b) &lt;&lt; std::endl;    return 0;&#125;</code></pre></li></ul></li><li>在工程根目录下执行以下命令编译运行程序，终端应输出<code>a + b = 32</code>：<ul><li><code>cd build</code></li><li><code>cmake ..</code></li><li><code>make</code></li><li><code>./main</code></li></ul></li></ol><h2 id="添加配置文件（在-vscode目录下）"><a href="#添加配置文件（在-vscode目录下）" class="headerlink" title="添加配置文件（在.vscode目录下）"></a>添加配置文件（在.vscode目录下）</h2><ol><li><p><strong>launch.json</strong>：配置gdb的参数，重要的参数已有注释说明</p><pre><code class="json">&#123;    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;g++ build and debug active file&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/build/main&quot;,     // 编译出来的可执行文件的路径            &quot;args&quot;: [],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: false,            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;setupCommands&quot;: [                &#123;                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                &#125;            ],            &quot;preLaunchTask&quot;: &quot;my_build&quot;,    // 启动gdb前要做的事，和tasks.json中的label对应            &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;        &#125;    ]&#125;</code></pre></li><li><p><strong>tasks.json</strong>：自定义启动gdb前的任务，重要的参数已有注释说明</p><pre><code class="json">&#123;    &quot;version&quot;: &quot;2.0.0&quot;,    &quot;options&quot;: &#123;        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/build&quot;   // 执行命令的位置    &#125;,    &quot;tasks&quot;: [        &#123;            &quot;type&quot;: &quot;shell&quot;,            &quot;label&quot;: &quot;cmake&quot;,            &quot;command&quot;: &quot;cmake&quot;,            &quot;args&quot;: [                &quot;..&quot;            ]        &#125;,  // 即cmake ..        &#123;            &quot;label&quot;: &quot;make&quot;,            &quot;group&quot;: &#123;                &quot;kind&quot;: &quot;build&quot;,                &quot;isDefault&quot;: true            &#125;,            &quot;command&quot;: &quot;make&quot;,            &quot;args&quot;: [            ]        &#125;,  // 即make        &#123;            &quot;label&quot;: &quot;my_build&quot;,            &quot;dependsOrder&quot;: &quot;sequence&quot;, // 按列出的顺序执行任务            &quot;dependsOn&quot;:[                &quot;cmake&quot;,                &quot;make&quot;            ]        &#125;    ]&#125;</code></pre></li><li><p>这样配置的话在每一次的调试前都会先重新编译一次代码，避免了手动编译</p></li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>打上断点，按<strong>F5</strong>开始调试，不出意外的话能够正常调试：<img src="https://www.helloimg.com/i/2025/02/10/67a9d3364cac3.png" alt="调试界面"></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12V转9V转5V电源板方案分享</title>
      <link href="/2024/05/31/12V%E8%BD%AC9V%E8%BD%AC5V%E7%94%B5%E6%BA%90%E6%9D%BF%E6%96%B9%E6%A1%88%E5%88%86%E4%BA%AB/"/>
      <url>/2024/05/31/12V%E8%BD%AC9V%E8%BD%AC5V%E7%94%B5%E6%BA%90%E6%9D%BF%E6%96%B9%E6%A1%88%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>9A大电流输出</p><span id="more"></span><h2 id="12V转9V转5V电源板方案分享"><a href="#12V转9V转5V电源板方案分享" class="headerlink" title="12V转9V转5V电源板方案分享"></a>12V转9V转5V电源板方案分享</h2><blockquote><p><a href="https://oshwhub.com/yuan_scuter/12v-zhuan-9v-zhuan-5v">立创开源链接</a></p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>实验室最近在做灵巧手，手上有<strong>6个</strong>微型伺服电缸，每个电缸的工作电压为9V，峰值电流为<strong>1.5A</strong>，故要找到一个输出电流能力强的DCDC降压芯片。此外电源板还需要5V的电压给通信板上的can芯片供电。这些需求最终都放在了一块半径24mm的圆形PCB上。</p><h3 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h3><ol><li><p>12V转9V，使用<strong>XL6016E1</strong></p><ul><li>这是其手册的描述：<img src="https://www.helloimg.com/i/2024/10/13/670b75aac8b68.png" alt="XL4016"></li><li>参考手册里的设计，原理图如下：<br><img src="https://www.helloimg.com/i/2024/10/13/670b75aac9dbb.png" alt="XL4016原理图"></li><li>这里<strong>FB</strong>引脚的参考电压是1.25V，输出电压的计算公式为$1.25*(1+R1&#x2F;R2)$。</li></ul></li><li><p>9V转5V，使用<strong>LM2596SX-5.0</strong></p><ul><li>这是其手册描述：<br><img src="https://www.helloimg.com/i/2024/10/13/670b75aae5cd2.png" alt="LM2596"></li><li>参考手册里的设计，原理图如下：<br><img src="https://www.helloimg.com/i/2024/10/13/670b75aab5de3.png" alt="LM2596原理图"></li></ul></li><li><p>PCB绘制</p><ul><li>顶层为12V转9V网络：<br><img src="https://www.helloimg.com/i/2024/10/13/670b75ab1543d.png" alt="正面"></li><li>底层为9V转5V网络：<br><img src="https://www.helloimg.com/i/2024/10/13/670b75aae1111.png" alt="背面"></li><li>layout时遵循以下规则：<ul><li>输入电容容量小的靠近芯片，输出电容容量大的靠近芯片</li><li>与FB相连的两个电阻尽量靠近FB，走线细且短</li><li>电感底部挖空</li><li>过大电流的网络开窗，以便焊接时堆锡</li></ul></li></ul></li></ol><h3 id="焊接测试"><a href="#焊接测试" class="headerlink" title="焊接测试"></a>焊接测试</h3><ul><li><img src="https://www.helloimg.com/i/2024/10/13/670b75ad6e610.jpg" alt="实物正面"></li><li><img src="https://www.helloimg.com/i/2024/10/13/670b75ad481ba.jpg" alt="实物背面"></li><li>暂时未测试持续过大电流的发热如何，不过XL4016上可以先贴个散热片</li></ul>]]></content>
      
      
      <categories>
          
          <category> 电源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu中安装aprilTag库并使用C++链接</title>
      <link href="/2024/04/30/Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85aprilTag%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8C++%E9%93%BE%E6%8E%A5/"/>
      <url>/2024/04/30/Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85aprilTag%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8C++%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>稳定可靠的视觉基准系统</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><code>git clone https://github.com/AprilRobotics/apriltag.git</code></li><li><code>cd apriltag</code></li><li><code>cmake -B build -DCMAKE_BUILD_TYPE=Release</code></li><li><code>sudo cmake --build build --target install</code></li><li><code>make -j</code></li><li><code>sudo make install</code></li></ul><h2 id="修改（重要）"><a href="#修改（重要）" class="headerlink" title="修改（重要）"></a>修改（重要）</h2><ul><li><code>sudo nano /usr/local/share/apriltag/cmake/apriltagTargets-release.cmake</code></li><li>在原文件的 <strong>set(CMAKE_IMPORT_FILE_VERSION 1)</strong> 后面添加<pre><code class="cmake">    set(apriltag_INCLUDE_DIR &quot;/usr/local/include/apriltag&quot;)    find_library(apriltag_LIBRARY1 NAMES libapriltag.so PATHS &quot;/usr/local/lib&quot; )     find_library(apriltag_LIBRARY2 NAMES libapriltag.so.3 PATHS &quot;/usr/local/lib&quot; )     find_library(apriltag_LIBRARY3 NAMES libapriltag.so.3.1.0 PATHS &quot;/usr/local/lib&quot; )     set(apriltag_LIBS $&#123;apriltag_LIBRARY1&#125;        $&#123;apriltag_LIBRARY2&#125;    $&#123;apriltag_LIBRARY3&#125;)</code></pre></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>新建一个目录，其结构如下：<pre><code class="shell">.├── CMakeLists.txt└── main.cpp</code></pre></li><li>CMakeLists.txt<pre><code class="cmake">cmake_minimum_required(VERSION 3.10)project(test_code CXX)add_executable($&#123;PROJECT_NAME&#125;    &quot;main.cpp&quot;)find_package(OpenCV 4 REQUIRED)find_package(apriltag REQUIRED)target_include_directories($&#123;PROJECT_NAME&#125;    PRIVATE        $&#123;OpenCV_INCLUDE_DIRS&#125;        $&#123;apriltag_INCLUDE_DIRS&#125;)target_link_libraries($&#123;PROJECT_NAME&#125;    PRIVATE        $&#123;OpenCV_LIBS&#125;         apriltag)</code></pre></li><li>main.cpp<pre><code class="cpp">#include &lt;iostream&gt;#include &lt;opencv2/opencv.hpp&gt;#include &lt;apriltag.h&gt;#include &lt;tag36h11.h&gt;using namespace std;using namespace cv;int main() &#123;    // 初始化 AprilTag 检测器    apriltag_family_t *tf = tag36h11_create();    apriltag_detector_t *td = apriltag_detector_create();    apriltag_detector_add_family(td, tf);    VideoCapture cap(0);    cap.set(cv::CAP_PROP_FRAME_WIDTH, 640);    cap.set(cv::CAP_PROP_FRAME_HEIGHT, 480);    cap.set(cv::CAP_PROP_FOURCC, cv::VideoWriter::fourcc(&#39;M&#39;, &#39;J&#39;, &#39;P&#39;, &#39;G&#39;));    while (1)     &#123;        Mat frame, frame_gray;        bool isRead = cap.read(frame);        if (!isRead) &#123; break; &#125;        cvtColor(frame, frame_gray, COLOR_BGR2GRAY);        // 检测标签        image_u8_t im = &#123;.width = frame_gray.cols, .height = frame_gray.rows, .stride = frame_gray.cols, .buf = frame_gray.data&#125;;        zarray_t *detections = apriltag_detector_detect(td, &amp;im);        // 显示检测结果        for (int i = 0; i &lt; zarray_size(detections); i++) &#123;            apriltag_detection_t *det;            zarray_get(detections, i, &amp;det);            putText(frame, to_string(det-&gt;id), Point(det-&gt;c[0],det-&gt;c[1]), FONT_HERSHEY_SIMPLEX, 1.0, Scalar(0, 255, 0), 1);                        for (int i = 0; i &lt; 4; ++i)             &#123;                putText(frame, to_string(i), Point(det-&gt;p[i][0],det-&gt;p[i][1]), FONT_HERSHEY_SIMPLEX, 1.0, Scalar(255, 0, 0), 2);                int next = (i + 1) % 4;                cv::line(frame, Point(det-&gt;p[i][0],det-&gt;p[i][1]), Point(det-&gt;p[next][0],det-&gt;p[next][1]), cv::Scalar(0, 255, 0), 2);            &#125;            apriltag_detection_destroy(det);        &#125;        imshow(&quot;frame&quot;, frame);        waitKey(30);        zarray_destroy(detections);    &#125;    // 循环结束后销毁检测器和家族    apriltag_detector_destroy(td);    tag36h11_destroy(tf);    return 0;&#125;</code></pre></li><li>在根目录下<code>mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make</code>，最后<code>./test_code</code>即可</li><li><img src="https://www.helloimg.com/i/2024/10/13/670b7390162b0.png" alt="res"></li></ul>]]></content>
      
      
      <categories>
          
          <category> aprilTag </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4B使用硬件串口</title>
      <link href="/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E4%B8%B2%E5%8F%A3/"/>
      <url>/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E4%B8%B2%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>树莓派4B相较前几代多了4个硬件串口</p><span id="more"></span><h2 id="树莓派4B硬件串口数量"><a href="#树莓派4B硬件串口数量" class="headerlink" title="树莓派4B硬件串口数量"></a>树莓派4B硬件串口数量</h2><ul><li><p>4B相比前几代增加了4个硬件串口，具体看下图</p></li><li><p><img src="https://www.helloimg.com/i/2024/10/13/670b738f6cb8f.png" alt="串口资源"></p></li><li><p><a href="https://www.raspberrypi.com/documentation/computers/configuration.html#configuring-uarts">这是官网的描述</a></p></li><li><p>这就意味着我们并不需要像很多博客说的那样修改映射，直接开启这些硬件串口就能用！</p></li></ul><h2 id="硬件串口的信息查看"><a href="#硬件串口的信息查看" class="headerlink" title="硬件串口的信息查看"></a>硬件串口的信息查看</h2><ul><li>比如我们想查看UART2的信息，就可以在终端输入<code>dtoverlay -h uart2</code>，终端输出：<img src="https://www.helloimg.com/i/2024/10/13/670b738f150a2.png" alt="uart2"></li><li>这里显示串口2使用的是GPIO0~3，其中<strong>GPIO0</strong>是<strong>TX</strong>，<strong>GPIO1</strong>是<strong>RX</strong>，GPIO2和GPIO3是CTS&#x2F;RTS用于硬件流控，通常的使用过程中不需要考虑。</li><li>这里附上4b的引脚定义图：<img src="https://www.helloimg.com/i/2024/10/13/670b738fbf2c0.png" alt="引脚定义图"></li></ul><h2 id="配置串口2"><a href="#配置串口2" class="headerlink" title="配置串口2"></a>配置串口2</h2><ol><li><code>sudo nano /boot/config.txt</code>打开配置文件，在文件<strong>末尾</strong>添加<code>dtoverlay=uart2</code></li><li>重启树莓派</li><li><code>ls /dev/ttyAMA*</code>查看是否成功开启，有ttyAMA1说明成功开启，另外这里的&#x2F;dev&#x2F;ttyAMA0是默认开启的，用于树莓派的蓝牙通信。<strong>现在就可以使用该串口了!</strong><img src="https://www.helloimg.com/i/2024/10/13/670b738f2baed.png" alt="ama"></li></ol><h2 id="c-例程"><a href="#c-例程" class="headerlink" title="c++例程"></a>c++例程</h2><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;termios.h&gt;#include &lt;string.h&gt;int main() &#123;    // 打开串口    int serialPort = open(&quot;/dev/ttyAMA1&quot;, O_RDWR | O_NOCTTY | O_NDELAY);    if (serialPort &lt; 0) &#123;        std::cerr &lt;&lt; &quot;Error opening serial port&quot; &lt;&lt; std::endl;        return 1;    &#125;    // 配置串口    struct termios tty;    if(tcgetattr(serialPort, &amp;tty) != 0) &#123;        std::cerr &lt;&lt; &quot;Error from tcgetattr&quot; &lt;&lt; std::endl;        return 1;    &#125;    cfsetospeed(&amp;tty, B9600);    cfsetispeed(&amp;tty, B9600);    tty.c_cflag &amp;= ~PARENB;    tty.c_cflag &amp;= ~CSTOPB;    tty.c_cflag &amp;= ~CSIZE;    tty.c_cflag |= CS8;    tty.c_cflag &amp;= ~CRTSCTS;    tty.c_cflag |= CREAD | CLOCAL;    tty.c_lflag &amp;= ~ICANON;    tty.c_lflag &amp;= ~ECHO;    tty.c_lflag &amp;= ~ECHOE;    tty.c_lflag &amp;= ~ECHONL;    tty.c_lflag &amp;= ~ISIG;    tty.c_iflag &amp;= ~(IXON | IXOFF | IXANY);    tty.c_iflag &amp;= ~(ICRNL | INLCR);    tty.c_oflag &amp;= ~OPOST;    if (tcsetattr(serialPort, TCSANOW, &amp;tty) != 0) &#123;        std::cerr &lt;&lt; &quot;Error from tcsetattr&quot; &lt;&lt; std::endl;        return 1;    &#125;    // 发送数据    unsigned char data[] = &#123;0xff, 0x44, 0xfe&#125;;    write(serialPort, data, sizeof(data));    // 设置非阻塞模式    fcntl(serialPort, F_SETFL, FNDELAY);    // 循环读取数据    unsigned char byte;    int numBytesRead;    while (true) &#123;        numBytesRead = read(serialPort, &amp;byte, 1); // 读取一个字节        if (numBytesRead == 0) &#123;            // 没有数据            usleep(10000); // 等待 10 毫秒        &#125; else &#123;            // 打印接收到的字节，收到0xff退出            std::cout &lt;&lt; &quot;Received byte: &quot; &lt;&lt; std::hex &lt;&lt; (int)byte &lt;&lt; std::endl;            if (byte == 0xff) &#123;std::cout&lt;&lt;&quot;recived 0xff, exit!\n&quot;;break;&#125;        &#125;    &#125;    // 关闭串口    close(serialPort);    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4B编译源码安装OpenCV</title>
      <link href="/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85OpenCV/"/>
      <url>/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85OpenCV/</url>
      
        <content type="html"><![CDATA[<p>按照自己的需求在树莓派上灵活使用OpenCV</p><span id="more"></span><blockquote><p><a href="https://www.bilibili.com/video/BV1eM411o72k/?share_source=copy_web&vd_source=e67cc43f2e8443b722a5f50ef79db03e">视频教程</a></p></blockquote><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ul><li><p>查看系统版本（我的是bullseye），终端输入： <code>lsb_release -a </code></p></li><li><p>编辑 <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list</strong> 文件，注释掉其中所有内容，输入（注意版本号）：</p><blockquote><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> bullseye main non-free contrib rpi</p></blockquote></li><li><p>编辑 <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list</strong> 文件，注释掉其中所有内容，输入（注意版本号）：</p><blockquote><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/">https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/</a> bullseye main</p></blockquote></li><li><p>更新，终端输入： <code>sudo apt-get update &amp;&amp; sudo apt-get upgrade </code></p></li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li><p>安装等下要用到的工具，终端输入： <code>sudo apt-get install build-essential cmake unzip pkg-config </code></p></li><li><p>安装一些视频、图像处理库，终端分别输入：</p><pre><code>$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev$ sudo apt-get install libxvidcore-dev libx264-dev</code></pre></li><li><p>安装GUI后端，终端输入： <code>sudo apt-get install libgtk-3-dev </code></p></li><li><p>安装一个可以减少GTK警告的包，终端输入：<code>sudo apt-get install libcanberra-gtk* </code></p></li><li><p>安装两个数值优化的包，终端输入：<code>sudo apt-get install libatlas-base-dev gfortran </code></p></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul><li><p>下载相同版本的opencv和opencv_contrib压缩包，解压到用户目录下，顺手将两个目录重命名为<strong>opencv</strong>和<strong>opencv_contrib</strong></p></li><li><p>然后终端输入以下命令：</p><pre><code>$ cd ~/opencv$ mkdir build$ cd build$ cmake -D CMAKE_BUILD_TYPE=RELEASE \-D CMAKE_INSTALL_PREFIX=/usr/local \-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \-D ENABLE_NEON=ON \-D ENABLE_VFPV3=ON \-D BUILD_TESTS=OFF \-D OPENCV_ENABLE_NONFREE=ON \-D INSTALL_PYTHON_EXAMPLES=OFF \-D BUILD_EXAMPLES=OFF ..</code></pre><ul><li>解释各参数含义：<ul><li><strong>CMAKE_BUILD_TYPE</strong> 这个参数指定了编译的类型。在这里是RELEASE，意味着代码会被优化以获得最佳性能</li><li><strong>CMAKE_INSTALL_PREFIX</strong> 这个参数指定了安装目录，即在编译完成后安装的文件将被放置到&#x2F;usr&#x2F;local目录下</li><li><strong>OPENCV_EXTRA_MODULES_PATH</strong> 这个参数指定了额外的模块路径，用于指定OpenCV额外模块的位置</li><li><strong>ENABLE_NEON</strong> 这个参数启用了NEON指令集的优化，NEON是ARM处理器的SIMD指令集，用于加速图像和信号处理操作</li><li><strong>ENABLE_VFPV3</strong> 这个参数启用了VFPv3浮点运算优化，VFPv3是ARM处理器的浮点运算单元，用于提高浮点运算性能</li><li><strong>BUILD_TESTS</strong> 这个参数禁用了测试的构建，意味着在编译时不会构建测试代码</li><li><strong>OPENCV_ENABLE_NONFREE</strong> 这个参数启用了非免费模块，包括SIFT和SURF等专利算法</li><li><strong>INSTALL_PYTHON_EXAMPLES</strong> 这个参数禁用了Python示例的安装</li><li><strong>BUILD_EXAMPLES</strong> 这个参数禁用了示例的构建，意味着在编译时不会构建示例代码</li></ul></li></ul></li><li><p>在正式编译前需要扩大交换空间，因为默认只有100MB内存，想使用4个核心编译的话一般需要2GB内存。故编辑 <strong>&#x2F;etc&#x2F;dphys-swapfile</strong>，将 <strong>100</strong> 改为 <strong>2048</strong>，保存退出后还需要重启交换空间的服务：</p><pre><code>$ sudo /etc/init.d/dphys-swapfile stop$ sudo /etc/init.d/dphys-swapfile start</code></pre></li><li><p>终端输入 <code>make -j4 </code>开始编译，过程比较久，若遇到编译中断的情况可以只使用 <code>make </code>来编译</p></li><li><p>安装，终端输入：</p><pre><code>$ sudo make install$ sudo ldconfig</code></pre></li><li><p>最后别忘了修改 <strong>&#x2F;etc&#x2F;dphys-swapfile</strong>，将交换空间改回来。因为tf卡读写次数有限，过大的交换空间会加速tf卡的报废</p></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ul><li>终端输入 <code>export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.9/site-packages</code>后即可使用（注意自己python的版本）</li></ul><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><ul><li>新建demo目录，进入后新建build目录、CMakeLists.txt和main.cpp：<pre><code>$ mkdir build$ cd build $ mkdir build$ touch CMakeLists.txt$ touch main.cpp</code></pre></li><li>CMakeLists.txt内容:<pre><code class="cmake">cmake_minimum_required(VERSION 3.10)project(demo)add_executable(demo main.cpp)find_package( OpenCV 4 REQUIRED )include_directories($&#123;OpenCV_INCLUDE_DIRS&#125; &quot;include&quot;)target_link_libraries(demo $&#123;OpenCV_LIBS&#125;)</code></pre></li><li>main.cpp内容:<pre><code class="cpp">#include &lt;opencv2/opencv.hpp&gt;using namespace cv;int main (int argc, char *argv[])&#123;    Mat img = imread(argv[1], -1);    imshow(&quot;demo&quot;, img);    waitKey(0);    return 0;&#125;</code></pre></li><li>进入build目录，编译：<pre><code>$ cd build$ cmake ..$ make</code></pre></li><li>运行可执行文件demo即可，运行时应传入图片路径，比如： <code>./demo ~/img.jpg </code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
