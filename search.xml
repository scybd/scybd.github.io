<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>12V转9V转5V电源板方案分享</title>
      <link href="/2024/05/31/12V%E8%BD%AC9V%E8%BD%AC5V%E7%94%B5%E6%BA%90%E6%9D%BF%E6%96%B9%E6%A1%88%E5%88%86%E4%BA%AB/"/>
      <url>/2024/05/31/12V%E8%BD%AC9V%E8%BD%AC5V%E7%94%B5%E6%BA%90%E6%9D%BF%E6%96%B9%E6%A1%88%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>9A大电流输出</p><span id="more"></span><h2 id="12V转9V转5V电源板方案分享"><a href="#12V转9V转5V电源板方案分享" class="headerlink" title="12V转9V转5V电源板方案分享"></a>12V转9V转5V电源板方案分享</h2><blockquote><p><a href="https://oshwhub.com/yuan_scuter/12v-zhuan-9v-zhuan-5v">立创开源链接</a></p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>实验室最近在做灵巧手，手上有<strong>6个</strong>微型伺服电缸，每个电缸的工作电压为9V，峰值电流为<strong>1.5A</strong>，故要找到一个输出电流能力强的DCDC降压芯片。此外电源板还需要5V的电压给通信板上的can芯片供电。这些需求最终都放在了一块半径24mm的圆形PCB上。</p><h3 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h3><ol><li><p>12V转9V，使用<strong>XL6016E1</strong></p><ul><li>这是其手册的描述：<img src="https://i-blog.csdnimg.cn/blog_migrate/10a5c42ceba1fa6dd7b3a4b8a946388f.png" alt="XL4016"></li><li>参考手册里的设计，原理图如下：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/9fe6a355ea331d64dc257bf090b296ef.png" alt="XL4016原理图"></li><li>这里<strong>FB</strong>引脚的参考电压是1.25V，输出电压的计算公式为$1.25*(1+R1&#x2F;R2)$。</li></ul></li><li><p>9V转5V，使用<strong>LM2596SX-5.0</strong></p><ul><li>这是其手册描述：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/199c362675ef4b6998300e8fa0fd60a3.png" alt="LM2596"></li><li>参考手册里的设计，原理图如下：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/56f3f91d020b0a0ba1a95281c2372482.png" alt="LM2596原理图"></li></ul></li><li><p>PCB绘制</p><ul><li>顶层为12V转9V网络：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a35aaed2b81450b45a213206c966ab47.png" alt="正面"></li><li>底层为9V转5V网络：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/efe67d4ffb3a66e1ec0e561793252fb2.png" alt="背面"></li><li>layout时遵循以下规则：<ul><li>输入电容容量小的靠近芯片，输出电容容量大的靠近芯片</li><li>与FB相连的两个电阻尽量靠近FB，走线细且短</li><li>电感底部挖空</li><li>过大电流的网络开窗，以便焊接时堆锡</li></ul></li></ul></li></ol><h3 id="焊接测试"><a href="#焊接测试" class="headerlink" title="焊接测试"></a>焊接测试</h3><ul><li><img src="https://i-blog.csdnimg.cn/blog_migrate/bbb5f38660ca932e437da4ddab4e78c8.jpeg" alt="实物正面"></li><li><img src="https://i-blog.csdnimg.cn/blog_migrate/33a5e54f177532fc5971993f69b22b6a.jpeg" alt="实物背面"></li><li>暂时未测试持续过大电流的发热如何，不过XL4016上可以先贴个散热片</li></ul>]]></content>
      
      
      <categories>
          
          <category> 电源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu中安装aprilTag库并使用C++链接</title>
      <link href="/2024/04/30/Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85aprilTag%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8C++%E9%93%BE%E6%8E%A5/"/>
      <url>/2024/04/30/Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85aprilTag%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8C++%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>稳定可靠的视觉基准系统</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><code>git clone https://github.com/AprilRobotics/apriltag.git</code></li><li><code>cd apriltag</code></li><li><code>cmake -B build -DCMAKE_BUILD_TYPE=Release</code></li><li><code>sudo cmake --build build --target install</code></li><li><code>make -j</code></li><li><code>sudo make install</code></li></ul><h2 id="修改（重要）"><a href="#修改（重要）" class="headerlink" title="修改（重要）"></a>修改（重要）</h2><ul><li><code>sudo nano /usr/local/share/apriltag/cmake/apriltagTargets-release.cmake</code></li><li>在原文件的 <strong>set(CMAKE_IMPORT_FILE_VERSION 1)</strong> 后面添加  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(apriltag_INCLUDE_DIR <span class="string">&quot;/usr/local/include/apriltag&quot;</span>)</span><br><span class="line"><span class="keyword">find_library</span>(apriltag_LIBRARY1 NAMES libapriltag.so PATHS <span class="string">&quot;/usr/local/lib&quot;</span> ) </span><br><span class="line"><span class="keyword">find_library</span>(apriltag_LIBRARY2 NAMES libapriltag.so.<span class="number">3</span> PATHS <span class="string">&quot;/usr/local/lib&quot;</span> ) </span><br><span class="line"><span class="keyword">find_library</span>(apriltag_LIBRARY3 NAMES libapriltag.so.<span class="number">3.1</span>.<span class="number">0</span> PATHS <span class="string">&quot;/usr/local/lib&quot;</span> ) </span><br><span class="line"><span class="keyword">set</span>(apriltag_LIBS <span class="variable">$&#123;apriltag_LIBRARY1&#125;</span></span><br><span class="line"><span class="variable">$&#123;apriltag_LIBRARY2&#125;</span></span><br><span class="line"><span class="variable">$&#123;apriltag_LIBRARY3&#125;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>新建一个目录，其结构如下：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── main.cpp</span><br></pre></td></tr></table></figure></li><li>CMakeLists.txt  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(test_code CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    <span class="string">&quot;main.cpp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">4</span> REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(apriltag REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    PRIVATE</span><br><span class="line">        <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span></span><br><span class="line">        <span class="variable">$&#123;apriltag_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    PRIVATE</span><br><span class="line">        <span class="variable">$&#123;OpenCV_LIBS&#125;</span> </span><br><span class="line">        apriltag</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>main.cpp  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;apriltag.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tag36h11.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 AprilTag 检测器</span></span><br><span class="line">    <span class="type">apriltag_family_t</span> *tf = <span class="built_in">tag36h11_create</span>();</span><br><span class="line">    <span class="type">apriltag_detector_t</span> *td = <span class="built_in">apriltag_detector_create</span>();</span><br><span class="line">    <span class="built_in">apriltag_detector_add_family</span>(td, tf);</span><br><span class="line"></span><br><span class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    cap.<span class="built_in">set</span>(cv::CAP_PROP_FRAME_WIDTH, <span class="number">640</span>);</span><br><span class="line">    cap.<span class="built_in">set</span>(cv::CAP_PROP_FRAME_HEIGHT, <span class="number">480</span>);</span><br><span class="line">    cap.<span class="built_in">set</span>(cv::CAP_PROP_FOURCC, cv::VideoWriter::<span class="built_in">fourcc</span>(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;G&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        Mat frame, frame_gray;</span><br><span class="line">        <span class="type">bool</span> isRead = cap.<span class="built_in">read</span>(frame);</span><br><span class="line">        <span class="keyword">if</span> (!isRead) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="built_in">cvtColor</span>(frame, frame_gray, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测标签</span></span><br><span class="line">        <span class="type">image_u8_t</span> im = &#123;.width = frame_gray.cols, .height = frame_gray.rows, .stride = frame_gray.cols, .buf = frame_gray.data&#125;;</span><br><span class="line">        <span class="type">zarray_t</span> *detections = <span class="built_in">apriltag_detector_detect</span>(td, &amp;im);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示检测结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">zarray_size</span>(detections); i++) &#123;</span><br><span class="line">            <span class="type">apriltag_detection_t</span> *det;</span><br><span class="line">            <span class="built_in">zarray_get</span>(detections, i, &amp;det);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">putText</span>(frame, <span class="built_in">to_string</span>(det-&gt;id), <span class="built_in">Point</span>(det-&gt;c[<span class="number">0</span>],det-&gt;c[<span class="number">1</span>]), FONT_HERSHEY_SIMPLEX, <span class="number">1.0</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">putText</span>(frame, <span class="built_in">to_string</span>(i), <span class="built_in">Point</span>(det-&gt;p[i][<span class="number">0</span>],det-&gt;p[i][<span class="number">1</span>]), FONT_HERSHEY_SIMPLEX, <span class="number">1.0</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line">                <span class="type">int</span> next = (i + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                cv::<span class="built_in">line</span>(frame, <span class="built_in">Point</span>(det-&gt;p[i][<span class="number">0</span>],det-&gt;p[i][<span class="number">1</span>]), <span class="built_in">Point</span>(det-&gt;p[next][<span class="number">0</span>],det-&gt;p[next][<span class="number">1</span>]), cv::<span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">apriltag_detection_destroy</span>(det);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;frame&quot;</span>, frame);</span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="built_in">zarray_destroy</span>(detections);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环结束后销毁检测器和家族</span></span><br><span class="line">    <span class="built_in">apriltag_detector_destroy</span>(td);</span><br><span class="line">    <span class="built_in">tag36h11_destroy</span>(tf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在根目录下<code>mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make</code>，最后<code>./test_code</code>即可</li><li><img src="/./2-1.png" alt="res"></li></ul>]]></content>
      
      
      <categories>
          
          <category> aprilTag </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4B使用硬件串口</title>
      <link href="/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E4%B8%B2%E5%8F%A3/"/>
      <url>/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E4%B8%B2%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>树莓派4B相较前几代多了4个硬件串口</p><span id="more"></span><h2 id="树莓派4B硬件串口数量"><a href="#树莓派4B硬件串口数量" class="headerlink" title="树莓派4B硬件串口数量"></a>树莓派4B硬件串口数量</h2><ul><li><p>4B相比前几代增加了4个硬件串口，具体看下图</p></li><li><p><img src="/./1.png" alt="串口资源"></p></li><li><p><a href="https://www.raspberrypi.com/documentation/computers/configuration.html#configuring-uarts">这是官网的描述</a></p></li><li><p>这就意味着我们并不需要像很多博客说的那样修改映射，直接开启这些硬件串口就能用！</p></li></ul><h2 id="硬件串口的信息查看"><a href="#硬件串口的信息查看" class="headerlink" title="硬件串口的信息查看"></a>硬件串口的信息查看</h2><ul><li>比如我们想查看UART2的信息，就可以在终端输入<code>dtoverlay -h uart2</code>，终端输出：<img src="/./2.png" alt="uart2"></li><li>这里显示串口2使用的是GPIO0~3，其中<strong>GPIO0</strong>是<strong>TX</strong>，<strong>GPIO1</strong>是<strong>RX</strong>，GPIO2和GPIO3是CTS&#x2F;RTS用于硬件流控，通常的使用过程中不需要考虑。</li><li>这里附上4b的引脚定义图：<img src="/./3.png" alt="引脚定义图"></li></ul><h2 id="配置串口2"><a href="#配置串口2" class="headerlink" title="配置串口2"></a>配置串口2</h2><ol><li><code>sudo nano /boot/config.txt</code>打开配置文件，在文件<strong>末尾</strong>添加<code>dtoverlay=uart2</code></li><li>重启树莓派</li><li><code>ls /dev/ttyAMA*</code>查看是否成功开启，有ttyAMA1说明成功开启，另外这里的&#x2F;dev&#x2F;ttyAMA0是默认开启的，用于树莓派的蓝牙通信。<strong>现在就可以使用该串口了!</strong><img src="/./4.png" alt="ama"></li></ol><h2 id="c-例程"><a href="#c-例程" class="headerlink" title="c++例程"></a>c++例程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 打开串口</span></span><br><span class="line">    <span class="type">int</span> serialPort = <span class="built_in">open</span>(<span class="string">&quot;/dev/ttyAMA1&quot;</span>, O_RDWR | O_NOCTTY | O_NDELAY);</span><br><span class="line">    <span class="keyword">if</span> (serialPort &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error opening serial port&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置串口</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">termios</span> tty;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">tcgetattr</span>(serialPort, &amp;tty) != <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error from tcgetattr&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cfsetospeed</span>(&amp;tty, B9600);</span><br><span class="line">    <span class="built_in">cfsetispeed</span>(&amp;tty, B9600);</span><br><span class="line">    tty.c_cflag &amp;= ~PARENB;</span><br><span class="line">    tty.c_cflag &amp;= ~CSTOPB;</span><br><span class="line">    tty.c_cflag &amp;= ~CSIZE;</span><br><span class="line">    tty.c_cflag |= CS8;</span><br><span class="line">    tty.c_cflag &amp;= ~CRTSCTS;</span><br><span class="line">    tty.c_cflag |= CREAD | CLOCAL;</span><br><span class="line">    tty.c_lflag &amp;= ~ICANON;</span><br><span class="line">    tty.c_lflag &amp;= ~ECHO;</span><br><span class="line">    tty.c_lflag &amp;= ~ECHOE;</span><br><span class="line">    tty.c_lflag &amp;= ~ECHONL;</span><br><span class="line">    tty.c_lflag &amp;= ~ISIG;</span><br><span class="line">    tty.c_iflag &amp;= ~(IXON | IXOFF | IXANY);</span><br><span class="line">    tty.c_iflag &amp;= ~(ICRNL | INLCR);</span><br><span class="line">    tty.c_oflag &amp;= ~OPOST;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">tcsetattr</span>(serialPort, TCSANOW, &amp;tty) != <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error from tcsetattr&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[] = &#123;<span class="number">0xff</span>, <span class="number">0x44</span>, <span class="number">0xfe</span>&#125;;</span><br><span class="line">    <span class="built_in">write</span>(serialPort, data, <span class="built_in">sizeof</span>(data));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置非阻塞模式</span></span><br><span class="line">    <span class="built_in">fcntl</span>(serialPort, F_SETFL, FNDELAY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环读取数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> byte;</span><br><span class="line">    <span class="type">int</span> numBytesRead;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        numBytesRead = <span class="built_in">read</span>(serialPort, &amp;byte, <span class="number">1</span>); <span class="comment">// 读取一个字节</span></span><br><span class="line">        <span class="keyword">if</span> (numBytesRead == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有数据</span></span><br><span class="line">            <span class="built_in">usleep</span>(<span class="number">10000</span>); <span class="comment">// 等待 10 毫秒</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 打印接收到的字节，收到0xff退出</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Received byte: &quot;</span> &lt;&lt; std::hex &lt;&lt; (<span class="type">int</span>)byte &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">if</span> (byte == <span class="number">0xff</span>) &#123;std::cout&lt;&lt;<span class="string">&quot;recived 0xff, exit!\n&quot;</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭串口</span></span><br><span class="line">    <span class="built_in">close</span>(serialPort);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4B编译源码安装OpenCV</title>
      <link href="/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85OpenCV/"/>
      <url>/2024/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85OpenCV/</url>
      
        <content type="html"><![CDATA[<p>按照自己的需求在树莓派上灵活使用OpenCV</p><span id="more"></span><blockquote><p><a href="https://www.bilibili.com/video/BV1eM411o72k/?share_source=copy_web&vd_source=e67cc43f2e8443b722a5f50ef79db03e">视频教程</a></p></blockquote><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ul><li><p>查看系统版本（我的是bullseye），终端输入： <code>lsb_release -a </code></p></li><li><p>编辑 <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list</strong> 文件，注释掉其中所有内容，输入（注意版本号）：</p><blockquote><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> bullseye main non-free contrib rpi</p></blockquote></li><li><p>编辑 <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list</strong> 文件，注释掉其中所有内容，输入（注意版本号）：</p><blockquote><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/">https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/</a> bullseye main</p></blockquote></li><li><p>更新，终端输入： <code>sudo apt-get update &amp;&amp; sudo apt-get upgrade </code></p></li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li><p>安装等下要用到的工具，终端输入： <code>sudo apt-get install build-essential cmake unzip pkg-config </code></p></li><li><p>安装一些视频、图像处理库，终端分别输入：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev</span><br><span class="line">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span><br><span class="line">$ sudo apt-get install libxvidcore-dev libx264-dev</span><br></pre></td></tr></table></figure></li><li><p>安装GUI后端，终端输入： <code>sudo apt-get install libgtk-3-dev </code></p></li><li><p>安装一个可以减少GTK警告的包，终端输入：<code>sudo apt-get install libcanberra-gtk* </code></p></li><li><p>安装两个数值优化的包，终端输入：<code>sudo apt-get install libatlas-base-dev gfortran </code></p></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul><li><p>下载相同版本的opencv和opencv_contrib压缩包，解压到用户目录下，顺手将两个目录重命名为<strong>opencv</strong>和<strong>opencv_contrib</strong></p></li><li><p>然后终端输入以下命令：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/opencv</span><br><span class="line">$ mkdir build</span><br><span class="line">$ cd build</span><br><span class="line">$ cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">-D CMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \</span><br><span class="line">-D ENABLE_NEON=ON \</span><br><span class="line">-D ENABLE_VFPV3=ON \</span><br><span class="line">-D BUILD_TESTS=OFF \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">-D INSTALL_PYTHON_EXAMPLES=OFF \</span><br><span class="line">-D BUILD_EXAMPLES=OFF ..</span><br></pre></td></tr></table></figure><ul><li>解释各参数含义：<ul><li><strong>CMAKE_BUILD_TYPE</strong> 这个参数指定了编译的类型。在这里是RELEASE，意味着代码会被优化以获得最佳性能</li><li><strong>CMAKE_INSTALL_PREFIX</strong> 这个参数指定了安装目录，即在编译完成后安装的文件将被放置到&#x2F;usr&#x2F;local目录下</li><li><strong>OPENCV_EXTRA_MODULES_PATH</strong> 这个参数指定了额外的模块路径，用于指定OpenCV额外模块的位置</li><li><strong>ENABLE_NEON</strong> 这个参数启用了NEON指令集的优化，NEON是ARM处理器的SIMD指令集，用于加速图像和信号处理操作</li><li><strong>ENABLE_VFPV3</strong> 这个参数启用了VFPv3浮点运算优化，VFPv3是ARM处理器的浮点运算单元，用于提高浮点运算性能</li><li><strong>BUILD_TESTS</strong> 这个参数禁用了测试的构建，意味着在编译时不会构建测试代码</li><li><strong>OPENCV_ENABLE_NONFREE</strong> 这个参数启用了非免费模块，包括SIFT和SURF等专利算法</li><li><strong>INSTALL_PYTHON_EXAMPLES</strong> 这个参数禁用了Python示例的安装</li><li><strong>BUILD_EXAMPLES</strong> 这个参数禁用了示例的构建，意味着在编译时不会构建示例代码</li></ul></li></ul></li><li><p>在正式编译前需要扩大交换空间，因为默认只有100MB内存，想使用4个核心编译的话一般需要2GB内存。故编辑 <strong>&#x2F;etc&#x2F;dphys-swapfile</strong>，将 <strong>100</strong> 改为 <strong>2048</strong>，保存退出后还需要重启交换空间的服务：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/dphys-swapfile stop</span><br><span class="line">$ sudo /etc/init.d/dphys-swapfile start</span><br></pre></td></tr></table></figure></li><li><p>终端输入 <code>make -j4 </code>开始编译，过程比较久，若遇到编译中断的情况可以只使用 <code>make </code>来编译</p></li><li><p>安装，终端输入：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></li><li><p>最后别忘了修改 <strong>&#x2F;etc&#x2F;dphys-swapfile</strong>，将交换空间改回来。因为tf卡读写次数有限，过大的交换空间会加速tf卡的报废</p></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ul><li>终端输入 <code>export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.9/site-packages</code>后即可使用（注意自己python的版本）</li></ul><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><ul><li>新建demo目录，进入后新建build目录、CMakeLists.txt和main.cpp：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir build</span><br><span class="line">$ cd build </span><br><span class="line">$ mkdir build</span><br><span class="line">$ touch CMakeLists.txt</span><br><span class="line">$ touch main.cpp</span><br></pre></td></tr></table></figure></li><li>CMakeLists.txt内容:  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV <span class="number">4</span> REQUIRED )</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> <span class="string">&quot;include&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure></li><li>main.cpp内容:  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(argv[<span class="number">1</span>], <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;demo&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>进入build目录，编译：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></li><li>运行可执行文件demo即可，运行时应传入图片路径，比如： <code>./demo ~/img.jpg </code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
